!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Asm	properties	/properties (req, vararg for parameters)/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Asm	d,define	/defines/
!_TAG_KIND_DESCRIPTION!Asm	l,label	/labels/
!_TAG_KIND_DESCRIPTION!Asm	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Asm	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Asm	t,type	/types (structs and records)/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Asm	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/cock/src/coroutine/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Asm!section	placement	/placement where the assembled code goes/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
Alt	task.h	/^struct Alt$/;"	s
Alt	task.h	/^typedef struct Alt Alt;$/;"	t	typeref:struct:Alt
Altarray	task.h	/^struct Altarray$/;"	s
Altarray	task.h	/^typedef struct Altarray Altarray;$/;"	t	typeref:struct:Altarray
CHANEND	task.h	/^  CHANEND,$/;"	e	enum:chan_op
CHANNOBLK	task.h	/^  CHANNOBLK,$/;"	e	enum:chan_op
CHANNOP	task.h	/^  CHANNOP,$/;"	e	enum:chan_op
CHANRCV	task.h	/^  CHANRCV,$/;"	e	enum:chan_op
CHANSND	task.h	/^  CHANSND,$/;"	e	enum:chan_op
Channel	task.h	/^struct Channel$/;"	s
Channel	task.h	/^typedef struct Channel Channel;$/;"	t	typeref:struct:Channel
QLock	task.h	/^typedef struct QLock$/;"	s
QLock	task.h	/^} QLock;$/;"	t	typeref:struct:QLock
REG_RIP	taskimpl.h	/^	REG_RIP = 7,$/;"	e	enum:__anon78a9ce800103
REG_RSP	taskimpl.h	/^	REG_RSP = 6,$/;"	e	enum:__anon78a9ce800103
Rendez	task.h	/^struct Rendez$/;"	s
Rendez	task.h	/^typedef struct Rendez Rendez;$/;"	t	typeref:struct:Rendez
STACK	taskimpl.h	/^  STACK = 8192,$/;"	e	enum:__anon78a9ce800203
Task	task.h	/^typedef struct Task Task;$/;"	t	typeref:struct:Task
Task	taskimpl.h	/^struct Task$/;"	s
Tasklist	task.h	/^struct Tasklist$/;"	s
Tasklist	task.h	/^typedef struct Tasklist Tasklist;$/;"	t	typeref:struct:Tasklist
_TASK_H_	task.h	/^#define _TASK_H_$/;"	d
__anon78a9ce800103	taskimpl.h	/^{$/;"	g
__anon78a9ce800203	taskimpl.h	/^{$/;"	g
_chanop	channel.c	/^_chanop(Channel* c, int op, void* p, int canblock)$/;"	f	typeref:typename:int	file:
_qlock	qlock.c	/^_qlock(QLock* l, int block)$/;"	f	typeref:typename:int
_taskwakeup	rendez.c	/^_taskwakeup(Rendez* r, int all)$/;"	f	typeref:typename:int	file:
a	task.h	/^  Alt** a;$/;"	m	struct:Altarray	typeref:typename:Alt **
addarray	channel.c	/^addarray(Altarray* a, Alt* alt)$/;"	f	typeref:typename:void	file:
addtask	task.c	/^addtask(Tasklist* l, Task* t)$/;"	f	typeref:typename:void
alarmtime	taskimpl.h	/^  uvlong alarmtime;$/;"	m	struct:Task	typeref:typename:uvlong
all	Makefile	/^all :$/;"	t
allnext	taskimpl.h	/^  Task* allnext;$/;"	m	struct:Task	typeref:typename:Task *
allprev	taskimpl.h	/^  Task* allprev;$/;"	m	struct:Task	typeref:typename:Task *
alltask	task.c	/^Task** alltask;$/;"	v	typeref:typename:Task **
alltaskslot	taskimpl.h	/^  int alltaskslot;$/;"	m	struct:Task	typeref:typename:int
altalldeque	channel.c	/^altalldeque(Alt* a)$/;"	f	typeref:typename:void	file:
altcanexec	channel.c	/^altcanexec(Alt* a)$/;"	f	typeref:typename:int	file:
altcopy	channel.c	/^altcopy(Alt* s, Alt* r)$/;"	f	typeref:typename:void	file:
altdeque	channel.c	/^altdeque(Alt* a)$/;"	f	typeref:typename:void	file:
altexec	channel.c	/^altexec(Alt* a)$/;"	f	typeref:typename:void	file:
altqueue	channel.c	/^altqueue(Alt* a)$/;"	f	typeref:typename:void	file:
amove	channel.c	/^amove(void* dst, void* src, uint n)$/;"	f	typeref:typename:void	file:
arecv	task.h	/^  Altarray arecv;$/;"	m	struct:Channel	typeref:typename:Altarray
argv0	task.c	/^static char* argv0;$/;"	v	typeref:typename:char *	file:
asend	task.h	/^  Altarray asend;$/;"	m	struct:Channel	typeref:typename:Altarray
assertstack	task.c	/^assertstack(uint n)$/;"	f	typeref:typename:void
buf	task.h	/^  unsigned char* buf;$/;"	m	struct:Channel	typeref:typename:unsigned char *
buffer	primes.c	/^int buffer = 10;$/;"	v	typeref:typename:int
bufsize	task.h	/^  unsigned int bufsize;$/;"	m	struct:Channel	typeref:typename:unsigned int
c	task.h	/^  Channel* c;$/;"	m	struct:Alt	typeref:typename:Channel *
canqlock	qlock.c	/^canqlock(QLock* l)$/;"	f	typeref:typename:int
cc	Makefile	/^cc = tcc$/;"	m
chan_op	task.h	/^enum chan_op$/;"	g
chanalt	channel.c	/^chanalt(Alt* a)$/;"	f	typeref:typename:int
chanarray	channel.c	/^chanarray(Channel* c, enum chan_op op)$/;"	f	typeref:typename:Altarray *	file:
chanbrecv	channel.c	/^chanbrecv(Channel* c, void* v)$/;"	f	typeref:typename:int
chanbsend	channel.c	/^chanbsend(Channel* c, void* v)$/;"	f	typeref:typename:int
channbrecv	channel.c	/^channbrecv(Channel* c, void* v)$/;"	f	typeref:typename:int
channbrecvp	channel.c	/^channbrecvp(Channel* c)$/;"	f	typeref:typename:void *
channbrecvul	channel.c	/^channbrecvul(Channel* c, ulong v)$/;"	f	typeref:typename:int
channbsend	channel.c	/^channbsend(Channel* c, void* v)$/;"	f	typeref:typename:int
channbsendp	channel.c	/^channbsendp(Channel* c, void* v)$/;"	f	typeref:typename:int
channbsendul	channel.c	/^channbsendul(Channel* c, ulong v)$/;"	f	typeref:typename:int
chanrecv	channel.c	/^chanrecv(Channel* c, void* v)$/;"	f	typeref:typename:int
chanrecvp	channel.c	/^chanrecvp(Channel* c)$/;"	f	typeref:typename:void *
chanrecvul	channel.c	/^chanrecvul(Channel* c)$/;"	f	typeref:typename:ulong
chansend	channel.c	/^chansend(Channel* c, void* v)$/;"	f	typeref:typename:int
chansendp	channel.c	/^chansendp(Channel* c, void* v)$/;"	f	typeref:typename:int
chansendul	channel.c	/^chansendul(Channel* c, ulong v)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
contextswitch	task.c	/^contextswitch(jmp_buf from, jmp_buf to)$/;"	f	typeref:typename:void	file:
coroutine	README.md	/^# coroutine$/;"	c
delarray	channel.c	/^delarray(Altarray* a, int i)$/;"	f	typeref:typename:void	file:
deletechan	channel.c	/^deletechan(Channel* c)$/;"	f	typeref:typename:void
deltask	task.c	/^deltask(Tasklist* l, Task* t)$/;"	f	typeref:typename:void
elemsize	task.h	/^  unsigned int elemsize;$/;"	m	struct:Channel	typeref:typename:unsigned int
emalloc	primes.c	/^emalloc(unsigned long n)$/;"	f	typeref:typename:void *
exiting	taskimpl.h	/^  int exiting;$/;"	m	struct:Task	typeref:typename:int
goal	primes.c	/^int goal;$/;"	v	typeref:typename:int
head	task.h	/^  Task* head;$/;"	m	struct:Tasklist	typeref:typename:Task *
id	taskimpl.h	/^  uint id;$/;"	m	struct:Task	typeref:typename:uint
jmp_buf	taskimpl.h	/^typedef void *jmp_buf[10];$/;"	t	typeref:typename:void * [10]
l	task.h	/^  QLock* l;$/;"	m	struct:Rendez	typeref:typename:QLock *
lrand	primes.c	/^lrand(void)$/;"	f	typeref:typename:long
m	task.h	/^  unsigned int m;$/;"	m	struct:Altarray	typeref:typename:unsigned int
main	task.c	/^main(int argc, char** argv)$/;"	f	typeref:typename:int
mainstacksize	task.c	/^int mainstacksize;$/;"	v	typeref:typename:int
n	task.h	/^  unsigned int n;$/;"	m	struct:Altarray	typeref:typename:unsigned int
nalltask	task.c	/^int nalltask;$/;"	v	typeref:typename:int
name	task.h	/^  char* name;$/;"	m	struct:Channel	typeref:typename:char *
nbuf	task.h	/^  unsigned int nbuf;$/;"	m	struct:Channel	typeref:typename:unsigned int
nelem	taskimpl.h	/^#define nelem(/;"	d
newchan	channel.c	/^newchan(int elemsize, int bufsize)$/;"	f	typeref:typename:Channel *
newqlock	qlock.c	/^newqlock()$/;"	f	typeref:typename:QLock *
newrendez	rendez.c	/^newrendez(QLock* l)$/;"	f	typeref:typename:Rendez *
next	taskimpl.h	/^  Task* next;$/;"	m	struct:Task	typeref:typename:Task *
nil	taskimpl.h	/^#define nil /;"	d
off	task.h	/^  unsigned int off;$/;"	m	struct:Channel	typeref:typename:unsigned int
op	task.h	/^  enum chan_op op;$/;"	m	struct:Alt	typeref:enum:chan_op
otherop	channel.c	/^otherop(enum chan_op op)$/;"	f	typeref:enum:chan_op	file:
owner	task.h	/^  Task* owner;$/;"	m	struct:QLock	typeref:typename:Task *
plongjmp	jmp.S	/^plongjmp:$/;"	l
prev	taskimpl.h	/^  Task* prev;$/;"	m	struct:Task	typeref:typename:Task *
primetask	primes.c	/^primetask(void* arg)$/;"	f	typeref:typename:void
psetjmp	jmp.S	/^psetjmp:$/;"	l
qlock	qlock.c	/^qlock(QLock* l)$/;"	f	typeref:typename:void
quiet	primes.c	/^int quiet;$/;"	v	typeref:typename:int
qunlock	qlock.c	/^qunlock(QLock* l)$/;"	f	typeref:typename:void
ready	taskimpl.h	/^  int ready;$/;"	m	struct:Task	typeref:typename:int
startarg	taskimpl.h	/^  void* startarg;$/;"	m	struct:Task	typeref:typename:void *
startfn	taskimpl.h	/^  void (*startfn)(void*);$/;"	m	struct:Task	typeref:typename:void (*)(void *)
stk	taskimpl.h	/^  uchar* stk;$/;"	m	struct:Task	typeref:typename:uchar *
stksize	taskimpl.h	/^  uint stksize;$/;"	m	struct:Task	typeref:typename:uint
tail	task.h	/^  Task* tail;$/;"	m	struct:Tasklist	typeref:typename:Task *
task	task.h	/^  Task* task;$/;"	m	struct:Alt	typeref:typename:Task *
taskalloc	task.c	/^taskalloc(void (*fn)(void*), void* arg, uint stk)$/;"	f	typeref:typename:Task *	file:
taskargc	task.c	/^static int taskargc;$/;"	v	typeref:typename:int	file:
taskargv	task.c	/^static char** taskargv;$/;"	v	typeref:typename:char **	file:
taskcount	task.c	/^int taskcount;$/;"	v	typeref:typename:int
taskcreate	task.c	/^taskcreate(void (*fn)(void*), void* arg, uint stk)$/;"	f	typeref:typename:int
taskexit	task.c	/^taskexit(int val)$/;"	f	typeref:typename:void
taskexitall	task.c	/^taskexitall(int val)$/;"	f	typeref:typename:void
taskexitval	task.c	/^int taskexitval;$/;"	v	typeref:typename:int
taskidgen	task.c	/^int taskidgen;$/;"	v	typeref:typename:int
taskinfo	task.c	/^taskinfo(int s)$/;"	f	typeref:typename:void	file:
taskmain	primes.c	/^taskmain(int argc, char** argv)$/;"	f	typeref:typename:void
taskmainstart	task.c	/^taskmainstart(void* v)$/;"	f	typeref:typename:void	file:
tasknswitch	task.c	/^int tasknswitch;$/;"	v	typeref:typename:int
taskready	task.c	/^taskready(Task* t)$/;"	f	typeref:typename:void
taskrunning	task.c	/^Task* taskrunning;$/;"	v	typeref:typename:Task *
taskrunqueue	task.c	/^Tasklist taskrunqueue;$/;"	v	typeref:typename:Tasklist
taskschedcontext	task.c	/^jmp_buf taskschedcontext;$/;"	v	typeref:typename:jmp_buf
taskscheduler	task.c	/^taskscheduler(void)$/;"	f	typeref:typename:void	file:
tasksleep	rendez.c	/^tasksleep(Rendez* r)$/;"	f	typeref:typename:void
taskstart	task.c	/^taskstart(uint x, uint y)$/;"	f	typeref:typename:void	file:
taskswitch	task.c	/^taskswitch(void)$/;"	f	typeref:typename:void
taskwakeup	rendez.c	/^taskwakeup(Rendez* r)$/;"	f	typeref:typename:int
taskwakeupall	rendez.c	/^taskwakeupall(Rendez* r)$/;"	f	typeref:typename:int
taskyield	task.c	/^taskyield(void)$/;"	f	typeref:typename:int
uc	taskimpl.h	/^  jmp_buf uc;$/;"	m	struct:Task	typeref:typename:jmp_buf
uchar	taskimpl.h	/^typedef unsigned char uchar;$/;"	t	typeref:typename:unsigned char
uint	taskimpl.h	/^typedef unsigned int uint;$/;"	t	typeref:typename:unsigned int
ulong	taskimpl.h	/^typedef unsigned long ulong;$/;"	t	typeref:typename:unsigned long
uvlong	taskimpl.h	/^typedef unsigned long long uvlong;$/;"	t	typeref:typename:unsigned long long
v	task.h	/^  void* v;$/;"	m	struct:Alt	typeref:typename:void *
vlong	taskimpl.h	/^typedef long long vlong;$/;"	t	typeref:typename:long long
waiting	task.h	/^  Tasklist waiting;$/;"	m	struct:QLock	typeref:typename:Tasklist
waiting	task.h	/^  Tasklist waiting;$/;"	m	struct:Rendez	typeref:typename:Tasklist
xalt	task.h	/^  Alt* xalt;$/;"	m	struct:Alt	typeref:typename:Alt *
